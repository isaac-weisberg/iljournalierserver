// Code generated by "go-jason-gen"; DO NOT EDIT.

package main

import (
	"errors"

	gojason "github.com/isaac-weisberg/go-jason"
	parser "github.com/isaac-weisberg/go-jason/parser"
	values "github.com/isaac-weisberg/go-jason/values"
)

func makeAccessTokenHavingObjectFromJson(bytes []byte) (*accessTokenHavingObject, error) {
	var j = errors.Join
	var e = errors.New

	rootValueAny, err := parser.Parse(bytes)
	if err != nil {
		return nil, j(e("parsing json into an object tree failed"), err)
	}

	rootObject, err := rootValueAny.AsObject()
	if err != nil {
		return nil, j(e("interpreting root json value as an object failed"), err)
	}

	parsedObject, err := parseAccessTokenHavingObjectFromJsonObject(rootObject)
	if err != nil {
		return nil, j(e("parsing json into the resulting value failed"), err)
	}

	return parsedObject, nil
}

func parseAccessTokenHavingObjectFromJsonObject(rootObject *values.JsonValueObject) (*accessTokenHavingObject, error) {
	var j = errors.Join
	var e = errors.New

	var stringKeyValues = rootObject.StringKeyedKeyValuesOnly()

	valueForAccessTokenKey, exists := stringKeyValues["AccessToken"]
	if !exists {
		return nil, j(e("value not found for key 'AccessToken'"))
	}
	valueForAccessTokenKeyAsStringValue, err := valueForAccessTokenKey.AsString()
	if err != nil {
		return nil, j(e("interpreting JsonAny as String failed for key 'AccessToken'"), err)
	}
	parsedStringForAccessTokenKey := valueForAccessTokenKeyAsStringValue.String

	var decodable = gojason.Decodable{}
	var resultingStructAccessTokenHavingObject = accessTokenHavingObject{
		Decodable: decodable,
		AccessToken: parsedStringForAccessTokenKey,
	}
	return &resultingStructAccessTokenHavingObject, nil
}

